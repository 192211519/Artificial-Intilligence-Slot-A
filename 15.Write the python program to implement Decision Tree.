import numpy as np

# Sample dataset: [features], label
# Format: [feature1, feature2, ..., featureN], class_label
dataset = [
    [1, 1, 'Yes'],
    [1, 0, 'No'],
    [0, 1, 'No'],
    [0, 0, 'No'],
    [1, 1, 'Yes']
]

# Convert string labels to integers
def label_to_int(data):
    label_map = {}
    new_data = []
    for row in data:
        label = row[-1]
        if label not in label_map:
            label_map[label] = len(label_map)
        new_data.append(row[:-1] + [label_map[label]])
    return np.array(new_data), label_map

data, label_map = label_to_int(dataset)

# Split dataset
def split_dataset(data, feature_index, threshold):
    left = data[data[:, feature_index] <= threshold]
    right = data[data[:, feature_index] > threshold]
    return left, right

# Gini Impurity
def gini_index(groups):
    instances = sum(len(group) for group in groups)
    gini = 0.0
    for group in groups:
        size = len(group)
        if size == 0:
            continue
        score = 0.0
        labels = group[:, -1]
        for label in np.unique(labels):
            p = np.count_nonzero(labels == label) / size
            score += p ** 2
        gini += (1 - score) * (size / instances)
    return gini

# Find best split
def get_best_split(data):
    best_index, best_value, best_score, best_groups = 999, 999, 999, None
    for index in range(data.shape[1] - 1):  # exclude label
        for row in data:
            groups = split_dataset(data, index, row[index])
            gini = gini_index(groups)
            if gini < best_score:
                best_index, best_value, best_score, best_groups = index, row[index], gini, groups
    return {'index': best_index, 'value': best_value, 'groups': best_groups}

# Create terminal node
def to_terminal(group):
    outcomes = group[:, -1]
    return np.bincount(outcomes.astype(int)).argmax()

# Recursive split
def split(node, max_depth, min_size, depth):
    left, right = node['groups']
    del(node['groups'])

    # Terminal cases
    if len(left) == 0 or len(right) == 0:
        node['left'] = node['right'] = to_terminal(np.vstack((left, right)))
        return
    if depth >= max_depth:
        node['left'], node['right'] = to_terminal(left), to_terminal(right)
        return
    if len(left) <= min_size:
        node['left'] = to_terminal(left)
    else:
        node['left'] = get_best_split(left)
        split(node['left'], max_depth, min_size, depth + 1)
    if len(right) <= min_size:
        node['right'] = to_terminal(right)
    else:
        node['right'] = get_best_split(right)
        split(node['right'], max_depth, min_size, depth + 1)

# Build the tree
def build_tree(train, max_depth, min_size):
    root = get_best_split(train)
    split(root, max_depth, min_size, 1)
    return root

# Make prediction with tree
def predict(node, row):
    if row[node['index']] <= node['value']:
        if isinstance(node['left'], dict):
            return predict(node['left'], row)
        else:
            return node['left']
    else:
        if isinstance(node['right'], dict):
            return predict(node['right'], row)
        else:
            return node['right']

# Print the tree (optional)
def print_tree(node, depth=0):
    if isinstance(node, dict):
        print(f"{'|  ' * depth}[X{node['index']} <= {node['value']}]")
        print_tree(node['left'], depth + 1)
        print_tree(node['right'], depth + 1)
    else:
        for label, idx in label_map.items():
            if idx == node:
                print(f"{'|  ' * depth}Predict: {label}")

# Train and test
tree = build_tree(data, max_depth=3, min_size=1)
print_tree(tree)

# Predict on a new sample
sample = [1, 0]
predicted_label = predict(tree, sample)
label_name = [k for k, v in label_map.items() if v == predicted_label][0]
print(f"\nPrediction for input {sample}: {label_name}")
